---
layout      : 'default'
css         : 'new'
standalone  : true
order       : 1

title       : 'New in 2.0'
description : 'An introduction to new features found in the latest release'
type        : 'Main'
---

<%- @partial('header') %>
<script src="/javascript/new.js"></script>

<div class="main ui intro container">

  <h2 class="ui dividing header">Introduction</h2>

  <div class="no example">

    <h4 class="ui header">The Devil is in the Details</h4>
    <p>2.0 brings a whopping set of changes to the project:
    <div class="ui large bulleted list">
      <div class="item"><b>129</b> enhancements</div>
      <div class="item"><b>118</b> bug fixes</div>
      <div class="item"><b>3</b> new components</div>
      <div class="item">Rewrites of many components including <a href="/collections/menu.html"><code>menu</code></a>, and <a href="/elements/input.html"><code>input</code></a></div>
    </div>

    <p>There's just too much to cover in one page, but we've tried our best to give you examples of some of the new features available in 2.0</p>

    <p>To see the full list of what's changed check out the project's release notes.</p>

    <a href="https://github.com/Semantic-Org/Semantic-UI/blob/<%= @getBranch() %>/RELEASE-NOTES.md#version-200---june-30-2015" target="_blank" class="ui button">View Release Notes</a>
  </div>


  <h2 class="ui dividing header">Global Changes</h2>

  <div class="no example">
    <h4 class="ui header">Flexbox All The Things</h4>
    <p><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes" target="_blank">Flexbox</a> allows for elements to intuitively resize to fill available space, making many complex layouts much simpler.</p>
    <p>13 components: <a href="/collections/form.html">Form</a>, <a href="/collections/grid.html">Grid</a>, <a href="/collections/menu.html">Menu</a>, <a href="/elements/message.html">Message</a>, <a href="/elements/button.html">Button</a>, <a href="/elements/segment.html">Segment</a>, <a href="/elements/step.html">Step</a>, <a href="/modules/dropdown.html">Dropdown</a>, <a href="/modules/modal.html">Modal</a>, <a href="/views/feed.html">Feed</a>, <a href="/views/statistics.html">Statistic</a>, <a href="/views/card.html">Card</a>, <a href="/views/item.html">Item</a> now use <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes" target="_blank"><code>flex</code></a> for positioning.</p>

  </div>

  <div class="colored example">
    <h4 class="ui header">Complete Spectrum</h4>
    <p>Semantic now includes twelve named colors, enough for most languages to <a href="https://en.wikipedia.org/wiki/Linguistic_relativity_and_the_color_naming_debate#Berlin_and_Kay" target="_blank">distinguish between colors</a>. New in 2.0 are: olive, violet, brown and grey.</p>
    <a class="ui grey label">Grey</a>
    <a class="ui red pointing label">Red</a>
    <a class="ui orange tag label">Orange</a>
    <a class="ui yellow bottom pointing label">Yellow</a>
    <a class="ui olive label">
      <i class="mail icon"></i>
      Olive
    </a>
    <a class="ui green right pointing label">Green</a>
    <a class="ui teal label">
      Teal
      <div class="detail">Detail</div>
    </a>
    <a class="ui blue image label">
      <img src="/images/avatar2/small/elyse.png">
      Blue
    </a>
    <a class="ui violet label">
      Violet
    </a>
    <a class="ui purple label">
      Purple
      <i class="delete icon"></i>
    </a>
    <div class="ui horizontal segments">
      <div class="ui segment">
        <div class="ui pink top left ribbon label">Pink</div>
        <img src="/images/wireframe/paragraph.png" class="ui wireframe image">
      </div>
      <div class="ui segment">
        <div class="ui brown right ribbon label">Brown</div>
        <img src="/images/wireframe/paragraph.png" class="ui wireframe image">
      </div>
    </div>
  </div>
  <div class="no example">
    <h4 class="ui header">New Default Theme</h4>
    <p>All components have received a face-lift for 2.0. Styles give slightly more negative space and a few idiosyncratic design touches have been removed.</p>
  </div>
  <div class="no example">
    <h4 class="ui header">More Precise EM Values</h4>
    <p>EM sizing has been improved in 2.0, with all values rounding to exact pixel values. This helps common relative sizing pitfalls like rounding errors in vertical alignment.</p>
    <p>Em variables now use new globally calculated em ratios, like <code>@relative4px</code>, to express pixel values in terms of root em size. This makes sure components don't include confusing decimal or fractional values when dealing with sizing.</p>
  </div>


  <h2 class="ui dividing header">Grids</h2>

  <div class="example">
    <h4 class="ui header">Flexbox Grid</h4>
    <p>Grids in 2.0 now use <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes" target="_blank"><code>flexbox</code></a> so columns are always equal height across rows.</p>
    <div class="ui three column divided grid">
      <div class="row">
        <div class="column">
          <div class="ui segment">
            1
          </div>
        </div>
        <div class="column">
          <div class="ui segment">
            1
          </div>
          <div class="ui segment">
            2
          </div>
        </div>
        <div class="column">
          <div class="ui segment">
            1
          </div>
          <div class="ui segment">
            2
          </div>
          <div class="ui segment">
            3
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="highlighted example">
    <h4 class="ui header">Grids Create Themselves</h4>
    <p>The new <a href="/collections/grid.html#equal-width"><code>equal width</code></a> variation adjusts column widths automatically splitting available width between columns.</p>
    <div class="ui equal width grid">
      <div class="column"></div>
      <div class="column"></div>
      <div class="column"></div>
      <div class="column"></div>
    </div>
    <p class="ignored">If a column has a specified width, other columns will adapt to take available space around it.</p>
    <div class="ui equal width grid">
      <div class="column"></div>
      <div class="eight wide column"></div>
      <div class="column"></div>
    </div>
  </div>
  <div class="highlighted example">
    <h4 class="ui header">Containers</h4>
    <p><a href="/elements/container.html">Containers</a> have been added as a simple way to limit content width.</p>
    <div class="ui container">
      <div class="ui three column grid">
        <div class="column"></div>
        <div class="column"></div>
        <div class="column"></div>
      </div>
    </div>
  </div>

  <div class="stretched example">
    <h4 class="ui header">Stretched rows</h4>
    <p>The new <a href="/collections/grid.html#stretched"><code>stretched</code></a> variation makes vertically aligning layouts much simpler. Columns will not only match heights, but stretch their contents to match heights.</p>
    <div class="ui three column stretched grid">
      <div class="column">
        <div class="ui segment">
          1
        </div>
        <div class="ui segment">
          2
        </div>
      </div>
      <div class="column">
        <div class="ui segment">
          <img class="ui image" src="/images/wireframe/image.png">
        </div>
      </div>
      <div class="column">
        <div class="ui segment">
          1
        </div>
        <div class="ui segment">
          2
        </div>
      </div>
    </div>
  </div>

  <h2 class="ui dividing header">Dropdowns</h2>

  <div class="dropdown example">
    <h4 class="ui header">Multiple Selection</h4>
    <p>Multiple select dropdowns are now available, and can generate automatically from standard html selects.  </p>
    <p>Dropdowns now all support advanced keyboard shortcuts like <code>pagedown</code>, <code>delete</code>, <code>shift+left</code> <code>ctrl+click</code>, and selection using first letter of item.</p>
    <p>Additionally dropdowns will now automatically open <code>upward</code> if there is not enough space available in the viewport below a dropdown.</p>
    <select class="ui fluid dropdown" multiple>
      <%- @partial('examples/single/state-options') %>
    </select>
  </div>

  <div class="user example">
    <h4 class="ui header">User Tagging</h4>
    <p>All dropdowns, single and multiple now support user tagging. Values can be automatically separated by a delimiter and placed in a hidden input, or extend an existing select element.</p>
    <div class="ignored code" data-type="javascript">
    $('.ui.dropdown')
      .dropdown({
        allowAdditions: true
      })
    ;
    </div>
    <div class="ui form">
      <div class="two fields">
        <div class="field">
          <label>Primary Skill</label>
          <div class="ui search selection dropdown">
            <input name="primary-skill" type="hidden" />
            <i class="dropdown icon"></i>
            <div class="default text">Skills</div>
            <div class="menu">
              <%- @partial('examples/single/preset-menu') %>
            </div>
          </div>
        </div>
        <div class="field">
          <label>Skills</label>
          <div class="ui multiple search selection dropdown">
            <input name="all-skills" type="hidden" />
            <i class="dropdown icon"></i>
            <div class="default text">Skills</div>
            <div class="menu">
              <%- @partial('examples/single/preset-menu') %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="remote example">
    <h4 class="ui header">Remote Data</h4>
    <p>All dropdowns now support loading remote data. Selected name value pairs retrieved remotely are stored in <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage"><code>sessionStorage</code></a> so that selected values are repopulated correctly even after a page refresh.</p>
    <div class="ignored code" data-type="javascript">
      // somewhere in app
      $.api.settings.api = {
        queryTags: '//api.semantic-ui.com/tags/{query}'
      };
      $('.ui.dropdown')
        .dropdown({
          apiSettings: {
            action: 'queryTags'
          }
        })
      ;
    </div>
    <div class="ui form">
      <div class="two fields">
        <div class="field">
          <label>Favorite Animal</label>
          <div class="ui search selection dropdown">
            <input type="hidden">
            <i class="dropdown icon"></i>
            <input type="text" class="search">
            <div class="default text">Select one...</div>
          </div>
        </div>
        <div class="field">
          <label>Favorite Animals</label>
          <div class="ui multiple search selection dropdown">
            <input type="hidden">
            <i class="dropdown icon"></i>
            <input type="text" class="search">
            <div class="default text">Select...</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="dropdown example">
    <h4 class="ui header">Scrolling Menus</h4>
    <p><a href="/modules/dropdown.html#scrolling">Scrolling menu</a> and nested menus are now supported.</p>
    <p>Listing choices in a nested menu will still give all the same keyboard shortcuts and filtering as regular menus.</p>
    <div class="ui floating dropdown labeled icon button">
      <i class="filter icon"></i>
      <span class="text">Filter Posts</span>
      <div class="menu">
        <div class="ui icon search input">
          <i class="search icon"></i>
          <input type="text" placeholder="Search tags...">
        </div>
        <div class="divider"></div>
        <div class="header">
          <i class="tags icon"></i>
          Tag Label
        </div>
        <div class="scrolling menu">
          <div class="item">
            <div class="ui violet empty circular label"></div>
            Already Fixed
          </div>
          <div class="item">
            <div class="ui blue empty circular label"></div>
            Announcement
          </div>
          <div class="item">
            <div class="ui black empty circular label"></div>
            Cannot Fix
          </div>
          <div class="item">
            <div class="ui green empty circular label"></div>
            Discussion
          </div>
          <div class="item">
            <div class="ui orange empty circular label"></div>
            Enhancement
          </div>
          <div class="item">
            <div class="ui red empty circular label"></div>
            Important
          </div>
          <div class="item">
            <div class="ui pink empty circular label"></div>
            Interesting
          </div>
          <div class="item">
            <div class="ui purple empty circular label"></div>
            News
          </div>
          <div class="item">
            <div class="ui yellow empty circular label"></div>
            Off Topic
          </div>
          <div class="item">
            <div class="ui brown empty circular label"></div>
            Up Next
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="no example">
    <h4 class="ui header">Advanced Shortcuts</h4>
    <p>Dropdowns now support advanced shortcuts like <code>page down</code> and <code>page up</code>, scrolling to selection on first letter press, i.e. "N" for New York, <code>shift+left/right</code> for group selection, and <code>ctrl+click</code> for modifying groups.</p>
    <img class="ui image" src="/images/gif/multi-shortcuts.gif">
  </div>

  <div class="no example">
    <h4 class="ui header">Much More</h4>
    <p>Dropdowns support many, many new features, including:</p>
    <ul class="ui large bulleted list">
      <li>Maximum selection count is supported for multiple selects</li>
      <li>Mutation observers will now watch for changes in menus or the elements they are generated from and will update choices automatically</li>
      <li>Custom templated error messages are now supported with dropdowns</li>
    </ul>
  </div>

  <h2 class="ui dividing header">API</h2>


  <div class="remote example">
    <h4 class="ui header">Local Caching</h4>
    <p>API now supports <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage"><code>sessionStorage</code></a> caching. This setting makes repeated requests to a URL return results instantly across a user's session, drastically improving performance for components like <a href="/modules/search.html">search</a>.</p>
    <p>Try refreshing the page and searching the same letter, results will appear instantly without a server roundtrip.</p>
    <div class="code" data-type="javascript">
    $('.ui.dropdown')
      .dropdown({
        apiSettings: {
          cache : 'local',
          url: '//api.semantic-ui.com/tags/{query}'
        }
      })
    ;
    </div>
    <div class="ui form">
      <div class="field">
        <label>Favorite Animal</label>
        <div class="ui search selection dropdown">
          <input type="hidden">
          <i class="dropdown icon"></i>
          <input type="text" class="search">
          <div class="default text">Select one...</div>
        </div>
      </div>
    </div>
  </div>


  <div class="external example">
    <h4 class="ui header">Translates Any API</h4>
    <p><a href="/behaviors/api.html">API</a> now lets you adjust a server's JSON response using a new callback, <a href="/behaviors/api.html#response-callbacks"><code>onResponse</code></a>. This can let you restructure third party APIs to match your local data requirements.</p>
    <div class="ui search">
      <div class="ui left icon input">
        <input class="prompt" type="text" placeholder="Search GitHub">
        <i class="github icon"></i>
      </div>
    </div>
    <div class="ignored code" data-type="javascript">
    $('.ui.search')
      .search({
        type          : 'category',
        minCharacters : 3,
        apiSettings   : {
          onResponse: function(githubResponse) {
            var
              response = {
                results : {}
              }
            ;
            // translate github api response to work with search
            $.each(githubResponse.items, function(index, item) {
              var
                language   = item.language || 'Unknown',
                maxResults = 8
              ;
              if(index >= maxResults) {
                return false;
              }
              // create new language category
              if(response.results[language] === undefined) {
                response.results[language] = {
                  name    : language,
                  results : []
                };
              }
              // add result to category
              response.results[language].results.push({
                title       : item.name,
                description : item.description,
                url         : item.html_url
              });
            });
            return response;
          },
          url: '//api.github.com/search/repositories?q={query}'
        }
      })
    </div>
  </div>

  <div class="mock example">
    <h4 class="ui header">Mocked Responses</h4>
    <p><a href="/behaviors/api.html">API</a> now supports mocked responses, letting you specify how responses are returned in advance.</p>
    <div class="code" data-type="javascript">
      $('.toggle.button')
        .api({

          // lets pretend this took a while
          loadingDuration: 500,

          // lets treat this button as requesting this JSON
          mockResponse: {
            success: true
          }
        })
        // successful responses will trigger a text state change
        .state({
          text: {
            inactive   : 'Off',
            active     : 'On'
          }
        })
      ;
    </div>
    <div class="ui toggle button">
      Off
    </div>
  </div>
  <div class="async example">
    <h4 class="ui header">Custom Backends</h4>
    <p><a href="/behaviors/api.html">API</a> can now use <a href="/behaviors/api.html#using-custom-backends">custom asynchronous callbacks</a> for resolving API requests, this can let you use other custom XHR backends, or local data to resolve requests.</p>
    <div class="code" data-type="javascript">
    $('.toggle.button')
      .api({
        // lets wait a half second then try your luck
        mockResponseAsync: function(settings, callback) {
          var
            luckyPerson = (Math.random() < 0.5),
            response    = (luckyPerson)
              ? { success: true }
              : { success: false, message: 'You are not lucky' }
          ;
          // simulate this is an async task
          setTimeout(function() {
            callback(response);
          }, 500);
        },
        successTest: function(response) {
          return response && response.success;
        },
        onFailure: function (response) {
          alert(response.message);
        }
      })
      .state({
        text: {
          inactive : 'Off',
          active   : 'On'
        }
      })
    ;
    </div>
    <div class="ui toggle button">
      Off
    </div>

  </div>

  <h2 class="ui dividing header">Form</h2>

  <div class="form example">
    <h4 class="ui header">Autocomplete</h4>
    <p>Form now include custom styling for browser <a href="https://developers.google.com/web/fundamentals/input/form/label-and-name-inputs?hl=en">autocompleted form fields</a>. Autocompleted fields can also specify focused autocomplete, and errored autocomplete styles.</p>

    <form class="ui form" method="post" action="#autocomplete">
      <h4 class="ui dividing header">Shipping Information</h4>
      <div class="field">
        <label>Name</label>
        <div class="two fields">
          <div class="field">
            <input type="text" name="shipping[first-name]" placeholder="First Name" autocomplete="given-name">
          </div>
          <div class="field">
            <input type="text" name="shipping[last-name]" placeholder="Last Name"  autocomplete="family-name">
          </div>
        </div>
      </div>
      <div class="field">
        <label>Address</label>
        <div class="fields">
          <div class="eight wide field">
            <input type="text" name="shipping[address]" placeholder="Street Address" autocomplete="address-line1">
          </div>
          <div class="four wide field">
            <input type="text" name="shipping[address-2]" placeholder="Apt #" autocomplete="address-line2">
          </div>
          <div class="four wide field">
            <input type="text" name="shipping[zip]" placeholder="Zipcode" autocomplete="postal-code">
          </div>
        </div>
      </div>
      <div class="ui submit button">Submit</div>
    </form>

  </div>


  <h2 class="ui dividing header">Dimmer</h2>

  <div class="blurring example">
    <h4 class="ui header">Blurring Dimmers</h4>
    <p><a href="/modules/dimmer.html">Dimmers</a> now include <code>blurring</code> dimmer variations.</p>
    <p>Other component can use blurring dimmers to add overlay content, <a href="/modules/modal.html">modal</a> also includes a blurring setting that affects its generated dimmer.</p>

    <div class="ui cards">
      <div class="card">
        <div class="blurring dimmable image">
          <div class="ui dimmer">
            <div class="content">
              <div class="center">
                <div class="ui inverted button">Send Memo</div>
              </div>
            </div>
          </div>
          <img src="/images/avatar2/large/matthew.png">
        </div>
        <div class="content">
          <a class="header">Matthew</a>
        </div>
        <div class="extra content">
          <a class="right floated">
            Hired Jan 2014
          </a>
          <a>
            Human Resources
          </a>
        </div>
      </div>
      <div class="card">
        <div class="blurring dimmable image">
          <div class="ui inverted dimmer">
            <div class="content">
              <div class="center">
                <div class="ui primary button">Send Memo</div>
              </div>
            </div>
          </div>
          <img src="/images/avatar2/large/rachel.png">
        </div>
        <div class="content">
          <a class="header">Rachel</a>
        </div>
        <div class="extra content">
          <a class="right floated">
            Hired Feb 2015
          </a>
          <a>
            Accounting
          </a>
        </div>
      </div>
    </div>

  </div>

  <h2 class="ui dividing header">Checkbox</h2>

<!--   <div class="indeterminate example">
    <h4 class="ui header">Progresssively Enhanced</h4>
    <p><a href="/modules/checkbox.html">Checkboxes</a> now can work without javascript, although additional features are available with javascript use.</p>

    <div class="ui checkbox">
      <input type="checkbox" />
      <label>No Javascript</label>
    </div>

    <div class="ui divider"></div>
    <div class="ui slider checkbox">
      <input type="checkbox" />
      <label>No Javascript</label>
    </div>

    <div class="ui divider"></div>
    <div class="ui toggle checkbox">
      <input type="checkbox" />
      <label>No Javascript</label>
    </div>
  </div> -->

  <div class="indeterminate example">
    <h4 class="ui header">Indeterminate Checkbox</h4>

    <p><a href="/modules/checkbox.html">Checkboxes</a> now support an indeterminate state. This is useful when a collection of checkboxes may be partially selected.</p>
    <div class="ui relaxed list">
      <div class="item">
        <div class="ui master checkbox">
          <input type="checkbox" name="fruits" />
          <label>Fruits</label>
        </div>
        <div class="list">
          <div class="item">
            <div class="ui child checkbox">
              <input type="checkbox" name="apple" />
              <label>Apple</label>
            </div>
          </div>
          <div class="item">
            <div class="ui child checkbox">
              <input type="checkbox" name="orange" />
              <label>Orange</label>
            </div>
          </div>
          <div class="item">
            <div class="ui child checkbox">
              <input type="checkbox" name="pear" />
              <label>Pear</label>
            </div>
          </div>
        </div>
      </div>
      <div class="item">
        <div class="ui master checkbox">
          <input type="checkbox" name="vegetables" />
          <label>Vegetables</label>
        </div>
        <div class="list">
          <div class="item">
            <div class="ui child checkbox">
              <input type="checkbox" name="lettuce" />
              <label>Lettuce</label>
            </div>
          </div>
          <div class="item">
            <div class="ui child checkbox">
              <input type="checkbox" name="carrot" />
              <label>Carrot</label>
            </div>
          </div>
          <div class="item">
            <div class="ui child checkbox">
              <input type="checkbox" name="spinach" />
              <label>Spinach</label>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>


  <h2 class="ui dividing header">Segment</h2>

  <div class="example">
    <h4 class="ui header">Horizontal Groups</h4>
    <p>Horizontal groups are now available for <a href="/elements/segment.html">segment</a>.</p>
    <div class="ui horizontal segments">
      <div class="ui segment">
        <p>Left</p>
      </div>
      <div class="ui segment">
        <p>Center</p>
      </div>
      <div class="ui segment">
        <p>Right</p>
      </div>
    </div>
  </div>

  <div class="example">
    <h4 class="ui header">Complex Layouts</h4>
    <p>Groups now use <code>flexbox</code> and fully support nesting.</p>
    <div class="ui segments">
      <div class="ui segment">
        <p>Top</p>
      </div>
      <div class="ui segments">
        <div class="ui segment">
          <p>Nested Top</p>
        </div>
        <div class="ui segment">
          <p>Nested Middle</p>
        </div>
        <div class="ui segment">
          <p>Nested Bottom</p>
        </div>
      </div>
      <div class="ui segment">
        <p>Middle</p>
      </div>
      <div class="ui horizontal segments">
        <div class="ui segment">
          <p>Left</p>
        </div>
        <div class="ui segment">
          <p>Center</p>
        </div>
        <div class="ui segment">
          <p>Right</p>
        </div>
      </div>
      <div class="ui segment">
        <p>Bottom</p>
      </div>
    </div>
  </div>
  <div class="example">
    <h4 class="ui header">Typed Groups</h4>
  <p>Groups now support types like <a href="/elements/segment.html#raised"><code>raised</code></a>, <a href="/elements/segment.html#stacked"><code>stacked</code></a>, or <a href="/elements/segment.html#piled"><code>piled</code></a></p>
    <div class="ui raised segments">
      <div class="ui secondary segment">
        <p>Top</p>
      </div>
      <div class="ui tall stacked horizontal segments">
        <div class="ui segment">
          <p>Left</p>
        </div>
        <div class="ui segment">
          <p>Center</p>
        </div>
        <div class="ui segment">
          <p>Center</p>
        </div>
        <div class="ui segment">
          <p>Center</p>
        </div>
        <div class="ui segment">
          <p>Right</p>
        </div>
      </div>
      <div class="ui secondary segment">
        <p>Bottom</p>
      </div>
    </div>
  </div>

  <h2 class="ui dividing header">Menus</h2>

  <div class="example">
    <h4 class="ui header">Flexible Menus</h4>
    <p><a href="/collections/menu.html">Menus</a> have been completely rewritten to use <code>flexbox</code>. Items inside a menu will automatically adjust to align with other menu items regardless of size.</p>
    <div class="ui top attached menu">
      <div class="item">
        <img src="/images/logo.png">
      </div>
      <a class="active item">
        Bio
      </a>
      <a class="item">
        Photos
      </a>
    </div>
    <div class="ui bottom attached segment">
      <img class="ui wireframe image" src="/images/wireframe/paragraph.png">
    </div>
  </div>
  <div class="example">
    <h4 class="ui header">Vertical Tabs</h4>
    <p>Menus now include a new <a href="/collections/menu.html#tabular"><code>vertical tabular</code></a> menu type.</p>
    <div class="ui grid">
      <div class="four wide column">
        <div class="ui vertical fluid tabular menu">
          <a class="item active">
            Bio
          </a>
          <a class="item">
            Pics
          </a>
          <a class="item">
            Companies
          </a>
          <a class="item">
            Links
          </a>
        </div>
      </div>
      <div class="twelve wide stretched column">
        <div class="ui segment">
          This is an stretched grid column. This segment will always match the tab height
        </div>
      </div>
    </div>
  </div>
  <div class="example">
    <h4 class="ui header">Better Coupling</h4>
    <p>Menus now have better coupling with other components like dropdown, search, button, and input.</p>

    <div class="ignored code" data-type="javascript">
      $('.ui.menu .browse.item')
        .popup({
          popup     : '.classes.popup',
          hoverable : true,
          position  : 'bottom left',
          delay     : {
            show: 300,
            hide: 800
          }
        })
      ;
    </div>
    <div class="ignored code" data-type="javascript">
      $('.ui.search')
        .search({
          type: 'category',
          apiSettings: {
            action: 'categorySearch'
          }
        })
      ;
    </div>
    <div class="ui menu">
      <div class="browse link item">Browse</div>
      <div class="ui right aligned category search item">
        <div class="ui transparent icon input">
          <input class="prompt" type="text" placeholder="Search things...">
          <i class="search link icon"></i>
        </div>
        <div class="results"></div>
      </div>
    </div>
    <div class="ui flowing classes popup">
      <div class="ui equal width divided grid">
        <div class="column">
          <h4 class="ui header">Business</h4>
          <div class="ui link list">
            <a class="item">Design & Urban Ecologies</a>
            <a class="item">Fashion Design</a>
            <a class="item">Fine Art</a>
            <a class="item">Strategic Design</a>
          </div>
        </div>
        <div class="column">
          <h4 class="ui header">Liberal Arts</h4>
          <div class="ui link list">
            <a class="item">Anthropology</a>
            <a class="item">Economics</a>
            <a class="item">Media Studies</a>
            <a class="item">Philosophy</a>
          </div>
        </div>
        <div class="column">
          <h4 class="ui header">Social Sciences</h4>
          <div class="ui link list">
            <a class="item">Food Studies</a>
            <a class="item">Journalism</a>
            <a class="item">Non Profit Management</a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <h2 class="ui dividing header">Visibility</h2>

  <div class="visibility example">

    <h4 class="ui header">Simple Sticky</h4>

    <p><a href="/behaviors/visibility.html">Visibility API</a>s now include useful shortcuts for sticky content. A placeholder will automatically be added when an element is passed making sure other content does not shift position.</p>

    <p>Additionally <a href="/behaviors/visibility.html">visibility</a> and <a href="/modules/sticky.html">sticky</a> have been rewritten to use a pub/sub pattern which is much more performant than <code>1.0</code></p>

    <div class="ignored code" data-type="javascript">
      $('.overlay')
        .visibility({
          type   : 'fixed',
          offset : 15 // give some space from top of screen
        })
      ;
    </div>
    <div class="ignored code" data-type="css">
    .overlay {
      background-color: #FFFFFF;
      padding: 0.5em;
      box-shadow: 0px 0px 0px rgba(0, 0, 0, 0);
      transition: all 0.5s ease;
      background: transparent;
    }
    /* change style */
    .fixed.overlay {
      position: fixed;
      padding: 1em;
      box-shadow: 0px 0px 6px rgba(0, 0, 0, 0.2);
    }
    </div>
    <div class="ui segment">
      <div class="overlay">
        <div class="ui secondary menu">
          <a class="item">
            <i class="sidebar icon"></i> Menu
          </a>
          <a class="item">Option 1</a>
          <a class="item">Option 2</a>
          <a class="item">Option 3</a>
        </div>
      </div>
      <div class="ui clearing divider"></div>
      <img src="/images/wireframe/centered-paragraph.png" class="ui wireframe image">
      <img src="/images/wireframe/short-paragraph.png" class="ui wireframe image">
      <img src="/images/wireframe/media-paragraph.png" class="ui wireframe image">
      <img src="/images/wireframe/paragraph.png" class="ui wireframe image">
      <img src="/images/wireframe/media-paragraph.png" class="ui wireframe image">
      <img src="/images/wireframe/paragraph.png" class="ui wireframe image">
    </div>
  </div>
</div>
